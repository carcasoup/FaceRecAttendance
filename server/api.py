import os, shutil, time, cv2, numpy as np
from fastapi import APIRouter, Depends, File, UploadFile, Form, HTTPException, BackgroundTasks
from sqlalchemy.orm import Session
from datetime import datetime, date

from server.db import SessionLocal, engine, Base
from server.models import AttendanceRecord
from server.recognition import face_recognizer
from server.config import STUDENTS_DIR

# üéØ –°–æ–∑–¥–∞—ë–º —Å—Ö–µ–º—É (—Ç–∞–±–ª–∏—Ü—É attendance) –µ–¥–∏–Ω–æ–∂–¥—ã –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
Base.metadata.create_all(bind=engine)

router = APIRouter()

# Dependency –¥–ª—è –±–∞–∑—ã
def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

@router.post('/collect')
async def collect_data(
    background_tasks: BackgroundTasks,
    file: UploadFile = File(...),
    class_name: str = Form(...)
):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –≤ –ø–∞–ø–∫—É class_name –∏ –¥–æ–æ–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å.
    """
    target_dir = os.path.join(STUDENTS_DIR, class_name)
    os.makedirs(target_dir, exist_ok=True)
    filename = f"{int(time.time())}.jpg"
    path = os.path.join(target_dir, filename)
    with open(path, 'wb') as buf:
        shutil.copyfileobj(file.file, buf)
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ (–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤)
    background_tasks.add_task(face_recognizer.build_embedding_db, class_name)
    return {'status': 'ok', 'path': path}

@router.post('/recognize')
async def recognize_and_mark(
    background_tasks: BackgroundTasks,
    file: UploadFile = File(...),
    class_name: str = Form(...)
):
    """
    –†–∞—Å–ø–æ–∑–Ω–∞—ë–º –ª–∏—Ü–∞ –Ω–∞ –∫–∞–¥—Ä–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ —Ñ–æ–Ω–æ–≤–æ –ª–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ 'enter'.
    """
    data = await file.read()
    img = cv2.imdecode(np.frombuffer(data, np.uint8), cv2.IMREAD_COLOR)
    if img is None:
        raise HTTPException(400, 'Invalid image format')

    results = face_recognizer.predict(img)
    today = date.today()

    def record_entry():
        session = SessionLocal()
        try:
            for item in results:
                name = item.get('name')
                if not name or name.lower() == 'unknown':
                    continue
                rec = AttendanceRecord(
                    student_name=name,
                    classroom=class_name,
                    date=today,
                    timestamp=datetime.utcnow(),
                    event='enter'
                )
                session.add(rec)
                session.commit()
        finally:
            session.close()

    background_tasks.add_task(record_entry)
    return {'recognized': results}

@router.post('/mark')
def mark_entry(
    student_name: str,
    classroom: str,
    db: Session = Depends(get_db)
):
    """
    –†—É—á–Ω–∞—è –æ—Ç–º–µ—Ç–∫–∞ –≤—Ö–æ–¥–∞: –≤—Å–µ–≥–¥–∞ event='enter'.
    """
    now = datetime.utcnow()
    rec = AttendanceRecord(
        student_name=student_name,
        classroom=classroom,
        date=now.date(),
        timestamp=now,
        event='enter'
    )
    db.add(rec)
    db.commit()
    db.refresh(rec)
    return {'status': 'ok', 'student_name': student_name, 'classroom': classroom, 'event': rec.event, 'timestamp': rec.timestamp.isoformat()}